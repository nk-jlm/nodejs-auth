#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('nodejs-auth:server');
var http = require('http');
let config = require('../config');
let dbContext = require('../src/db');
let logger = require('../src/logger');

initDb().then(db => {
	return startServer();
}).catch(error => {
	logger.error('Error: ', error);
	process.exit(1);
});

async function startServer() {
	const port = config.get('port');
	app.set('port', port);

	/**
	 * Create HTTP server.
	 */

	var server = http.createServer(app);
	/**
	 * Listen on provided port, on all network interfaces.
	 */

	server.listen(port);
	server.on('error', onError);
	server.on('listening', onListening);

	/**
	 * Event listener for HTTP server "error" event.
	 */

	function onError(error) {
		if (error.syscall !== 'listen') {
			throw error;
		}

		var bind = typeof port === 'string'
			? 'Pipe ' + port
			: 'Port ' + port;

		// handle specific listen errors with friendly messages
		switch (error.code) {
			case 'EACCES':
				console.error(bind + ' requires elevated privileges');
				process.exit(1);
				break;
			case 'EADDRINUSE':
				console.error(bind + ' is already in use');
				process.exit(1);
				break;
			default:
				throw error;
		}
	}

	/**
	 * Event listener for HTTP server "listening" event.
	 */

	function onListening() {
		var addr = server.address();
		var bind = typeof addr === 'string'
			? 'pipe ' + addr
			: 'port ' + addr.port;
		debug('Listening on ' + bind);
	}
}
async function initDb() {
	try {
		return await dbContext.getInstance().connect(config.get('db'));
	} catch (err) {
		logger.error(`Can't initialize connection to db. error: `, err)
	}
}
